pb$tick()
# ## When testing for a single drug...
# k <- 1;     n.feat <- 150;    density.opt <- FALSE;     random.seed <- 7531
## Select biomarker...
bmChosen <- biomarkers[k];      #printf("\nChosen biomarker = %s", bmChosen)
ranks    <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
gnRank   <- get.top.genes(ranks[, 2:3], m.top = n.feat, verbose = FALSE);      m <- length(gnRank)
## Prepare datasets...
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
names(Y1) <- rownames(X1);            names(Y2) <- rownames(X2)
## DMTL model...
prediction <- DMTL(target_set = list("X" = X1, "y" = Y1), source_set = list("X" = X2, "y" = Y2), pred_model = model,
model_optimize = optimize, use_density = density.opt, random_seed = random.seed, all_pred = TRUE)
Y1.pred <- prediction$target;     Y1.pred.src <- prediction$source
## Baseline model...
Y1.pred.base <- if (model == "RF") {
RF_predict(x_train = norm.data(X2), y_train = Y2, x_test = norm.data(X1), lims = c(0, 1), optimize = optimize,
n_tree = 200, m_try = 0.4, seed = random.seed)
} else if (model == "SVM") {
SVM_predict(x_train = norm.data(X2), y_train = Y2, x_test = norm.data(X1), lims = c(0, 1), optimize = optimize,
kernel = "rbf", C = 2, eps = 0.01, kpar = list(sigma = 0.1), seed = random.seed)
} else if (model == "EN") {
EN_predict(x_train = norm.data(X2), y_train = Y2, x_test = norm.data(X1), lims = c(0, 1), optimize = optimize,
alpha = 0.8, seed = random.seed)
}
## Generate & save results...
results <- data.frame("DMTL"    = calc.perf(Y1, Y1.pred, measures = perf.mes),
"DMTL_SS" = calc.perf(Y1, Y1.pred.src, measures = perf.mes),
"BL"      = calc.perf(Y1, Y1.pred.base, measures = perf.mes), row.names = perf.mes)
## Print option...
if (length(q.run) == 1) { printf("\nResults for %s using top %d features = ", bmChosen, n.feat);     print(results) }
for (mes in perf.mes) { results.all[[mes]][bmChosen, ] <- results[mes, ] }
results.all$genes[bmChosen, ] <- m
}
## Calculate mean performance...
for (mes in perf.mes) { results.all[[mes]]["Mean", ] <- colMeans(results.all[[mes]][biomarkers, ], na.rm = TRUE) }
results.all$genes["Mean", ] <- mean(results.all$genes[biomarkers, ], na.rm = TRUE)
results.all[["table"]] <- do.call(rbind, lapply(perf.mes, function(mes) results.all[[mes]]["Mean", ]))
rownames(results.all$table) <- perf.mes
## Print options...
if (length(q.run) > 1) { printf("\nResults summary for top %d features = ", n.feat);    print(results.all$table) }
results.all
}
## Try out different models...
results.all.rf  <- run(q.run = 1:q, n.feat = 150, random.seed = 7531, density.opt = FALSE, model = "RF",  optimize = FALSE)
results.all.svm <- run(q.run = 1:q, n.feat = 150, random.seed = 7531, density.opt = FALSE, model = "SVM", optimize = FALSE)
results.all.en  <- run(q.run = 1:q, n.feat = 150, random.seed = 7531, density.opt = FALSE, model = "EN",  optimize = FALSE)
# ## Write in temporary file...
# write.in.file <- function() {
# write.table(results.all$NRMSE, file = sprintf("results_temp_%s.csv", format(Sys.Date(), "%d_%b_%Y")),
#             sep = "\t", row.names = TRUE, col.names = TRUE)
# write.table(results.all$NMAE, file = sprintf("results_temp_%s.csv", format(Sys.Date(), "%d_%b_%Y")),
#             sep = "\t", append = TRUE, row.names = TRUE, col.names = TRUE)
# write.table(results.all$SCC, file = sprintf("results_temp_%s.csv", format(Sys.Date(), "%d_%b_%Y")),
#             sep = "\t", append = TRUE, row.names = TRUE, col.names = TRUE)
# }
# write.in.file()
library(DMTL)
z <- 1:6
z
dim(z)
x <- rnorm(100, 0.2, 0.3)
mean(x)
sd(x)
x <- rnorm(1000, 0.2, 0.3)
sd(x)
mean(x)
range(x)
x_norm <- norm01(x)
mean(x)
mean(x_norm)
sd(x_norm)
range(x_norm)
library(DMTL)
x <- rnorm(100, 0.2, 0.3)
x_norm <- norm01(x)
print(range(x_norm))
X <- matrix(rnorm(1000, 0.2, 0.3), nrow = 100)
X_norm <- norm01(X)
dim(X_norm)
X[1:8, 1:8]
X_norm <- norm_data(X)
X[1:8, 1:8]
X_norm <- norm01(X)
X[1:8, 1:8]
X_norm[1:8, 1:8]
X_norm <- norm_data(X)
X_norm[1:8, 1:8]
range(X_norm)
X <- matrix(rnorm(1000, 0.2, 0.3), nrow = 100)
X_std <- zscore(X)
mean(X_std)
X_std[1:*, 1:8]
X_std[1:8, 1:8]
apply(X_std, MARGIN = 2, mean)
X <- matrix(rnorm(100, 0.2, 0.3), nrow = 20)
X_std <- zscore(X)
apply(X_std, 2, mean)
apply(X_std, 2, sd)
x <- rnorm(100, 0, 2.5)
x_filt <- confined(x, lims = c(-0.5, 0.5))
x_filt
range(x)
range(x_filt)
x <- rnorm(100, 0, 1)
x_filt
x <- rnorm(100, 0, 1)
x_filt <- confined(x, lims = c(-0.5, 0.5))
range(x)
range(x_filt)
#' @export
## Evaluate regression model performance...
get_perf <- function(y_obs, y_pred, measures = c("NRMSE", "NMAE", "PCC")) {
## Initialize results array...
perf_vals <- c()
for (mes in measures) {
## Calculate squared error...
if (grepl(pattern = "MSE", mes, ignore.case = TRUE)) {
num <- mean((y_obs - y_pred)^2)
den <- if (mes == "NRMSE") mean((y_obs - mean(y_obs))^2) else 1
pow <- if (mes == "MSE") 1 else 0.5
perf_vals[mes] <- (num / den)^pow
}
## Calculate absolute error...
else if (grepl(pattern = "MAE", mes, ignore.case = TRUE)) {
num <- mean(abs(y_obs - y_pred))
den <- if (mes == "NMAE") mean(abs(y_obs - mean(y_obs))) else 1
perf_vals[mes] <- num / den
}
## Calculate similarity measures...
else if (grepl(pattern = "CC", mes, ignore.case = TRUE)) {
alg <- if (mes == "SCC") "spearman" else "pearson"
perf_vals[mes] <- stats::cor(y_obs, y_pred, method = alg)
}
## Doesn't match any...
else
stop("Invalid measure! Please use common variants of MSE, MAE or correlation coefficients.")
}
perf_vals
}
x <- rnorm(100, 0.2, 0.5)
y <- sin(x)
y <- sin(x) + rnorm(100, 0, 0.2)
y_fit <- lm(y ~ x)
model <- lm(y ~ x)
model
x <- rnorm(1000, 0.2, 0.5)
y <- sin(x) + rnorm(1000, 0, 0.1)
model <- lm(y[1:800] ~ x[1:800])
y_obs <- y[801:1000]
y_pred <- predict(model, x[801:1000])
y_pred <- predict.lm(model, x[801:1000])
data <- rnorm(1000, 0.2, 0.5)
data <- cbind(x = data, y = sin(data) + rnorm(1000, 0, 0.1))
model <- lm(y ~ x, data = data[1:800, ])
data <- rnorm(1000, 0.2, 0.5)
data <- data.frame(x = data, y = sin(data) + rnorm(1000, 0, 0.1))
model <- lm(y ~ x, data = data[1:800, ])
y_obs <- data$y[801:1000]
y_pred <- predict.lm(model, newdata = data$x[801:1000])
y_pred <- predict.lm(model, newdata = data$x[801:1000], se.fit = TRUE)
y_pred <- predict.lm(model, newdata = as.data.frame(data$x[801:1000]))
data <- rnorm(1000, 0.2, 0.5)
data <- data.frame(x = data, y = sin(data) + rnorm(1000, 0, 0.1))
model <- lm(y ~ x, data = data)
y_fit <- predict(model, newdata = data[, "x"])
dim(data[, "x"])
data <- rnorm(1000, 0.2, 0.5)
data <- data.frame(x = data, y = sin(data) + rnorm(1000, 0, 0.1))
model <- lm(y ~ x, data = data)
y_fit <- predict(lm(y ~ x, data = data))
y_obs <- data$y
x <- rnorm(1000, 0.2, 0.5)
y <- x^2 + rnorm(1000, 0, 0.1)
y_fit <- predict(lm(y ~ x, data = data))
get_perf(y, y_fit, measures = "MSE")
get_perf(y, y_fit, measures = c("MSE", "RSQ"))
get_perf(y, y_fit, measures = c("MSE", "PCC"))
x <- rnorm(1000, 0.2, 0.5)
y <- x + rnorm(1000, 0, 0.1)
y_fit <- predict(lm(y ~ x, data = data))
get_perf(y, y_fit, measures = c("MSE", "PCC"))
y <- x
x <- rnorm(1000, 0.2, 0.5)
y <- x^2 + rnorm(1000, 0, 0.1)
y_fit <- predict(lm(y ~ x))
get_perf(y, y_fit, measures = c("MSE", "PCC"))
x <- rnorm(1000, 0.2, 0.5)
y <- x^2 + rnorm(1000, 0, 0.1)
y_fit <- predict(lm(y ~ x))
print(get_perf(y, y_fit, measures = c("MSE", "PCC")))
library(DMTL)
R
R.version
R.Version()
R.Version
R.version
library(caret)
R.version
R.Version()$version_string
R.version
R.Version()$version.string
library(caret)
library(glmnet)
library(kernlab)
library(ks)
library(randomForest)
sessionInfo()
library(DMTL)
R CMD CHECK --as-cran
x1 <- rnorm(100, 0.2, 0.6)
x2 <- runif(200)
matched <- dist_match(src = x1, ref = x2, lims = c(0, 1))
opar <- par(mfrow = c(1, 2))
hist(x1)
hist(matched)
par(opar)
opar <- par(mfrow = c(1, 3))
hist(list(x1, x2, matched))
hist(c(x1, x2, matched))
hist(list(x1, x2, matched))
lapply(list(x1, x2, matched), hist)
set.seed(7531)
x1 <- rnorm(100, 0.2, 0.6)
x2 <- runif(200)
matched <- dist_match(src = x1, ref = x2, lims = c(0, 1))
## Plot histograms...
opar <- par(mfrow = c(1, 3))
hist(x1);    hist(x2);    hist(matched)
par(opar)              # Reset par
x <- rnorm(100, 1, 0.5)
F <- ecdf(x)
fval <- F(x)
map <- match_func(knots = x, vals = fval)
x2 <- rnorm(20, 0.8, 0.5)
F2 <- ecdf(x2)
fval2 <- F2(x2)
matched <- match_func(knots = x, vals = fval, new_vals = fval2)
## Plot histograms...
opar <- par(mfrow = c(1, 3))
hist(x);    hist(x2);    hist(matched)
par(opar)              # Reset par
x <- data.frame(x1 = rnorm(1000, 0.2, 0.5), x2 = runif(1000, -1, 0.3))
y <- sin(x) + rnorm(1000, 0, 0.05)
training <- data.frame(x = x[1:800, ], y = y[1:800])
x <- data.frame(x1 = rnorm(1000, 0.2, 0.5), x2 = runif(1000, -1, 0.3))
y
x <- data.frame(x1 = rnorm(1000, 0.2, 0.5), x2 = runif(1000, -1, 0.3))
x <- rnorm(1000, 0.2, 0.5)
y <- sin(x) + rnorm(1000, 0, 0.1)
y <- sin(x) + rnorm(1000, 0, 0.05)
range(y)
y <- sin(x) + rnorm(1000, 0, 0.05)
y <- norm01(y)
x <- rnorm(1000, 0.2, 0.5)
y <- sin(x^2)
range(y)
x <- runif(1000, 0.2, 0.5)
y <- sin(x^2)
range(y)
x <- rnorm(1000, 0.2, 0.5)
y <- sin(x) + rnorm(1000, 0, 0.05)
training <- data.frame(x = x[1:800], y = y[1:800])
test <- data.frame(x = x[801:1000], y = y[801:1000])
model <- RF_predict(x_train = training$x, y_train = training$y)
model <- RF_predict(x_train = training$x, y_train = training$y, optimize = FALSE)
x <- rnorm(1000, 0.2, 0.5)
y <- sin(x) + rnorm(1000, 0, 0.05)
x_train <- data.frame(x = x[1:800])
y_train <- y[1:800]
model <- RF_predict(x_train, y_train)
model <- RF_predict(x_train, y_train, n_tree = 200, m_try = 0.4)
model <- RF_predict(x_train, y_train, n_tree = 200, m_try = 0)
model <- RF_predict(x_train, y_train, n_tree = 200, m_try = 1)
model <- RF_predict(x_train, y_train, n_tree = 200, m_try = 14)
model <- RF_predict(x_train, y_train, n_tree = 200, m_try = 1)
model <- RF_predict(x_train, y_train, n_tree = 200, m_try = 0.8)
model <- RF_predict(x_train, y_train, n_tree = 200, m_try = 0.4)
model <- RF_predict(x_train, y_train, n_tree = 200, m_try = 0.5)
model <- RF_predict(x_train, y_train, n_tree = 200, m_try = 0.6)
x <- matrix(rnorm(3000, 0.2, 1.2), ncol = 3)
y <- 0.3*x[, 1] + 0.1*x[, 2] - x[, 3] + rnorm(1000)
y <- 0.3*x[, 1] + 0.1*x[, 2] - x[, 3] + rnorm(1000, 0, 0.05)
x_train <- as.data.frame(x[1:800, ])
y_train <- y[1:800]
model <- RF_predict(x_train = x[1:800, ], y_train = y[1:800], n_tree = 300, m_try = 0.33)
mdoel
model <- RF_predict(x_train = x[1:800, ], y_train = y[1:800], n_tree = 300, m_try = 0.33)
model
x <- matrix(rnorm(3000, 0.2, 1.2), ncol = 3)
y <- 0.3*x[, 1] + 0.1*x[, 2] - x[, 3] + rnorm(1000, 0, 0.05)
model <- RF_predict(x_train = x[1:800, ], y_train = y[1:800], n_tree = 300, m_try = 0.33)
y_pred <- RF_predict(x_train = x[1:800, ], y_train = y[1:800], x_test = x[801:1000, ], n_tree = 300, m_try = 0.33)
y_test <- y[801:1000]
performance(y_test, y_pred, measures = "RSQ")
y_pred <- SVM_predict(x_train = x[1:800, ], y_train = y[1:800], x_test = x[801:1000, ], kernel = "rbf", kpar = list(sigma = 0.05))
performance(y_test, y_pred, measures = "RSQ")
y_pred <- EN_predict(x_train = x[1:800, ], y_train = y[1:800], x_test = x[801:1000, ], alpha = 0.6)
performance(y_test, y_pred, measures = "RSQ")
x <- matrix(rnorm(3000, 0.2, 1.2), ncol = 3)
y <- 0.3*x[, 1]^2 + 0.1*x[, 2] - x[, 3] + rnorm(1000, 0, 0.05)
y_pred <- RF_predict(x_train = x[1:800, ], y_train = y[1:800], x_test = x[801:1000, ], n_tree = 300, m_try = 0.33)
performance(y_test, y_pred, measures = "RSQ")
y_pred <- RF_predict(x_train = x[1:800, ], y_train = y[1:800], x_test = x[801:1000, ], optimize = TRUE, verbose = TRUE)
names(x) <- paste0("x", 1:3)
y_pred <- RF_predict(x_train = x[1:800, ], y_train = y[1:800], x_test = x[801:1000, ], optimize = TRUE, verbose = TRUE)
x[1:8, ]
colnames(x) <- paste0("x", 1:3)
x[1:8, ]
y_pred <- RF_predict(x_train = x[1:800, ], y_train = y[1:800], x_test = x[801:1000, ], optimize = TRUE, verbose = TRUE)
performance(y_test, y_pred, measures = "RSQ")
x1 <- matrix(runif(3000, 0.3, 0.6), ncol = 3)
x1 <- matrix(runif(3000, 0.3, 0.6), ncol = 3);    colnames(x) <- paste0("x", 1:3)
y1 <- 0.3*x[, 1] + 0.2*x[, 2] - x[, 3] + rnorm(1000, 0, 0.05)
x1 <- matrix(runif(3000, 0.3, 0.6), ncol = 3);    colnames(x1) <- paste0("x", 1:3)
y1 <- 0.3*x[, 1] + 0.2*x[, 2] - x[, 3] + rnorm(1000, 0, 0.05)
x2 <- matrix(rnorm(3000, 0.2, 0.5), ncol = 3);    colnames(x2) <- paste0("x", 1:3)
y2 <- -0.1*x[, 1] + 0.8*x[, 2] + 0.4*x[, 3] + rnorm(1000, 0, 0.05)
y1_pred <- DMTL(target_set = list(X = x1, y = y1), source_set = list(X = x2, y = y2), pred_model = "RF")
y1 <- norm01(y1)
y2 <- norm01(y2)
y1_pred <- DMTL(target_set = list(X = x1, y = y1), source_set = list(X = x2, y = y2), pred_model = "RF")
performance(y1, y1_pred)
performance(y1, y1_pred, measures = "RSQ")
x1 <- matrix(rnorm(3000, 0.3, 0.6), ncol = 3);    colnames(x1) <- paste0("x", 1:3)
y1 <- 0.3*x[, 1] + 0.2*x[, 2] - x[, 3] + rnorm(1000, 0, 0.05)
x1 <- matrix(rnorm(3000, 0.3, 0.6), ncol = 3);    dimnames(x1) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y1 <- 0.3*x[, 1] + 0.2*x[, 2] - x[, 3] + rnorm(1000, 0, 0.05)
x2 <- matrix(rnorm(3000, 0, 0.5), ncol = 3);    dimnames(x2) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y2 <- -0.1*x[, 1] + 0.8*x[, 2] + 0.4*x[, 3] + rnorm(1000, 0, 0.05)
y1_norm <- norm01(y1)
y2_norm <- norm01(y2)
y1_pred <- DMTL(target_set = list(X = x1, y = y1), source_set = list(X = x2, y = y2), pred_model = "RF", random_seed = 7531)
y1_pred <- DMTL(target_set = list(X = x1, y = y1_norm), source_set = list(X = x2, y = y2_norm), pred_model = "RF", random_seed = 7531)
performance(y1, y1_pred, measures = "RSQ")
y1_pred_RF <- RF_predict(x_train = x2, y_train = y2, x_test = x2)
y1_pred_RF <- RF_predict(x_train = x2, y_train = y2, x_test = x2, seed = 7531)
performance(y1, y1_pred_RF, measures = "RSQ")
y1_pred <- DMTL(target_set = list(X = x1, y = y1_norm), source_set = list(X = x2, y = y2_norm), pred_model = "RF")
performance(y1, y1_pred, measures = "RSQ")
y1_pred_RF <- RF_predict(x_train = x2, y_train = y2, x_test = x2)
performance(y1, y1_pred_RF, measures = "RSQ")
y1_pred <- DMTL(target_set = list(X = x1, y = y1_norm), source_set = list(X = x2, y = y2_norm), pred_model = "RF")
performance(y1_norm, y1_pred, measures = "RSQ")
y1_pred_RF <- RF_predict(x_train = x2, y_train = y2_norm, x_test = x2)
performance(y1_norm, y1_pred_RF, measures = "RSQ")
performance(y1_norm, y1_pred, measures = "MSE")
performance(y1_norm, y1_pred_RF, measures = "MSE")
x1 <- matrix(rnorm(3000, 0.3, 0.6), ncol = 3);    dimnames(x1) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y1 <- 0.3*x[, 1] + 0.2*x[, 2] - x[, 3] + rnorm(1000, 0, 0.05)
x2 <- matrix(runif(3000, 0, 0.5), ncol = 3);    dimnames(x2) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y2 <- -0.1*x[, 1] + 0.8*x[, 2] + 0.4*x[, 3] + rnorm(1000, 0, 0.05)
y1_norm <- norm01(y1)
y2_norm <- norm01(y2)
y1_pred <- DMTL(target_set = list(X = x1, y = y1_norm), source_set = list(X = x2, y = y2_norm), pred_model = "RF")
performance(y1_norm, y1_pred_RF, measures = c("MSE", "RSQ"))
y1_pred_RF <- RF_predict(x_train = x2, y_train = y2_norm, x_test = x2)
performance(y1_norm, y1_pred_RF, measures = c("MSE", "RSQ"))
y1_pred <- DMTL(target_set = list(X = x1, y = y1_norm), source_set = list(X = x2, y = y2_norm), pred_model = "RF")
performance(y1_norm, y1_pred, measures = c("MSE", "RSQ"))
y1_pred_RF <- RF_predict(x_train = x2, y_train = y2_norm, x_test = x2)
performance(y1_norm, y1_pred_RF, measures = c("MSE", "RSQ"))
performance(y1_norm, y1_pred, measures = c("MSE", "PCC"))
performance(y1_norm, y1_pred_RF, measures = c("MSE", "PCC"))
performance(y1_norm, y1_pred, measures = c("MSE", "SCC"))
x1 <- matrix(rnorm(3000, 0.3, 0.6), ncol = 3);    dimnames(x1) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y1 <- 0.3*x[, 1] + 0.2*x[, 2] - x[, 3] + rnorm(1000, 0, 0.05)
x2 <- matrix(runif(3000, 0, 0.5), ncol = 3);    dimnames(x2) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y2 <- -0.1*x[, 1] + 0.8*x[, 2] + 0.4*x[, 3] + rnorm(1000, 0, 0.05)
y1_norm <- norm01(y1)
y2_norm <- norm01(y2)
y1_pred <- DMTL(target_set = list(X = x1, y = y1_norm), source_set = list(X = x2, y = y2_norm), pred_model = "RF")
performance(y1_norm, y1_pred, measures = c("MSE", "PCC"))
y1_pred_RF <- RF_predict(x_train = x2, y_train = y2_norm, x_test = x2)
performance(y1_norm, y1_pred_RF, measures = c("MSE", "PCC"))
y1_pred <- DMTL(target_set = list(X = x1, y = y1_norm), source_set = list(X = x2, y = y2_norm), pred_model = "RF", model_optimize = TRUE)
y1_pred_RF <- RF_predict(x_train = x2, y_train = y2_norm, x_test = x2, optimize = TRUE)
performance(y1_norm, y1_pred, measures = c("MSE", "PCC"))
performance(y1_norm, y1_pred_RF, measures = c("MSE", "PCC"))
performance(y1_norm, y1_pred, measures = c("MSE", "SCC"))
performance(y1_norm, y1_pred_RF, measures = c("MSE", "SCC"))
library(DMTL)
x1 <- matrix(rnorm(3000, 0.3, 0.6), ncol = 3);    dimnames(x1) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y1 <- 0.3*x[, 1] + 0.2*x[, 2] - x[, 3] + rnorm(1000, 0, 0.05)
x2 <- matrix(runif(3000, 0, 0.5), ncol = 3);    dimnames(x2) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
x1 <- matrix(rnorm(3000, 0.3, 0.6), ncol = 3);    dimnames(x1) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y1 <- 0.3*x1[, 1] + 0.2*x1[, 2] - x1[, 3] + rnorm(1000, 0, 0.05)
x2 <- matrix(runif(3000, 0, 0.5), ncol = 3);    dimnames(x2) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y2 <- -0.1*x2[, 1] + 0.8*x2[, 2] + 0.4*x2[, 3] + rnorm(1000, 0, 0.05)
y1_pred <- DMTL(target_set = list(X = x1, y = y1_norm), source_set = list(X = x2, y = y2_norm), pred_model = "RF")
y1_pred <- DMTL(target_set = list(X = x1, y = y1), source_set = list(X = x2, y = y2), pred_model = "RF")
y1_pred_RF <- RF_predict(x_train = x2, y_train = y2, x_test = x2)
performance(y1, y1_pred, measures = c("MSE", "SCC"))
performance(y1, y1_pred_RF, measures = c("MSE", "SCC"))
library(DMTL)
x1 <- matrix(rnorm(3000, 0.3, 0.6), ncol = 3);    dimnames(x1) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y1 <- 0.3*x[, 1] + 0.2*x[, 2] - x[, 3] + rnorm(1000, 0, 0.05)
x2 <- matrix(runif(3000, 0, 0.5), ncol = 3);    dimnames(x2) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y2 <- -0.1*x2[, 1] + 0.8*x2[, 2] + 0.4*x2[, 3] + rnorm(1000, 0, 0.05)
y1_pred <- DMTL(target_set = list(X = x1, y = y1), source_set = list(X = x2, y = y2), pred_model = "RF")
y1_pred_RF <- RF_predict(x_train = x2, y_train = y2, x_test = x2)
performance(y1, y1_pred, measures = c("MSE", "SCC"))
performance(y1, y1_pred_RF, measures = c("MSE", "SCC"))
y1_norm <- norm01(y1)
y2_norm <- norm01(y2)
y1_pred <- DMTL(target_set = list(X = x1, y = y1_norm), source_set = list(X = x2, y = y2_norm), pred_model = "RF")
y1_pred_RF <- RF_predict(x_train = x2, y_train = y2_norm, x_test = x2)
performance(y1_norm, y1_pred, measures = c("MSE", "SCC"))
performance(y1_norm, y1_pred_RF, measures = c("MSE", "SCC"))
x1 <- matrix(rnorm(3000, 0.3, 0.6), ncol = 3);    dimnames(x1) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y1 <- 0.3*x[, 1] + 0.2*x[, 2] - x[, 3] + rnorm(1000, 0, 0.05)
x2 <- matrix(rnorm(3000, 0, 0.5), ncol = 3);    dimnames(x2) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y2 <- -0.1*x2[, 1] + 0.8*x2[, 2] + 0.4*x2[, 3] + rnorm(1000, 0, 0.05)
y1_pred <- DMTL(target_set = list(X = x1, y = y1), source_set = list(X = x2, y = y2), pred_model = "RF")
y1_pred_RF <- RF_predict(x_train = x2, y_train = y2, x_test = x2)
performance(y1, y1_pred, measures = c("MSE", "SCC"))
performance(y1, y1_pred_RF, measures = c("MSE", "SCC"))
y1_norm <- norm01(y1)
y2_norm <- norm01(y2)
y1_pred <- DMTL(target_set = list(X = x1, y = y1_norm), source_set = list(X = x2, y = y2_norm), pred_model = "RF")
y1_pred_RF <- RF_predict(x_train = x2, y_train = y2_norm, x_test = x2)
performance(y1_norm, y1_pred, measures = c("MSE", "SCC"))
performance(y1_norm, y1_pred_RF, measures = c("MSE", "SCC"))
x1 <- matrix(rnorm(3000, 0.3, 0.6), ncol = 3);    dimnames(x1) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y1 <- 0.3*x[, 1] + 0.2*x[, 2] - x[, 3] + rnorm(1000, 0, 0.05)
x2 <- matrix(rnorm(3000, 0, 0.5), ncol = 3);    dimnames(x2) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
x1 <- matrix(rnorm(3000, 0.3, 0.6), ncol = 3);    dimnames(x1) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
x
x1 <- matrix(rnorm(3000, 0.3, 0.6), ncol = 3);    dimnames(x1) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y1 <- 0.3*x1[, 1] + 0.1*x1[, 2] - x1[, 3] + rnorm(1000, 0, 0.05)
x2 <- matrix(rnorm(3000, 0, 0.5), ncol = 3);    dimnames(x2) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y2 <- -0.2*x2[, 1] + 0.3*x2[, 2] - x2[, 3] + rnorm(1000, 0, 0.05)
y1_pred <- DMTL(target_set = list(X = x1, y = y1), source_set = list(X = x2, y = y2), pred_model = "RF")
y1_pred_RF <- RF_predict(x_train = x2, y_train = y2, x_test = x1)
performance(y1, y1_pred, measures = c("MSE", "PCC"))
performance(y1, y1_pred_RF, measures = c("MSE", "PCC"))
x2 <- matrix(runif(3000, 0, 0.5), ncol = 3);    dimnames(x2) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y2 <- -0.2*x2[, 1] + 0.3*x2[, 2] - x2[, 3] + rnorm(1000, 0, 0.05)
y1_pred <- DMTL(target_set = list(X = x1, y = y1), source_set = list(X = x2, y = y2), pred_model = "RF")
y1_pred_RF <- RF_predict(x_train = x2, y_train = y2, x_test = x1)
performance(y1, y1_pred, measures = c("MSE", "PCC"))
performance(y1, y1_pred_RF, measures = c("MSE", "PCC"))
library(DMTL)
x1 <- matrix(rnorm(3000, 0.3, 0.6), ncol = 3);    dimnames(x1) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y1 <- 0.3*x1[, 1] + 0.1*x1[, 2] - x1[, 3] + rnorm(1000, 0, 0.05)
x2 <- matrix(rnorm(3000, 0, 0.5), ncol = 3);    dimnames(x2) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y2 <- -0.2*x2[, 1] + 0.3*x2[, 2] - x2[, 3] + rnorm(1000, 0, 0.05)
y1_pred <- DMTL(target_set = list(X = x1, y = y1), source_set = list(X = x2, y = y2), pred_model = "RF")
performance(y1, y1_pred, measures = c("MSE", "PCC"))
library(DMTL)
?DMTL
library(DMTL)
?DMTL
names(list(a = 1, b = 2))
names(list(1, 2))
library(DMTL)
?DMTL
library(DMTL)
?DMTL
library(DMTL)
?DMTL
library(DMTL)
?DMTL
?warning
library(DMTL)
x1 <- matrix(rnorm(3000, 0.3, 0.6), ncol = 3);    dimnames(x1) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y1 <- 0.3*x1[, 1] + 0.1*x1[, 2] - x1[, 3] + rnorm(1000, 0, 0.05)
x2 <- matrix(rnorm(3000, 0, 0.5), ncol = 3);    dimnames(x2) <- list(paste0("sample", 1:1000), paste0("f", 1:3))
y2 <- -0.2*x2[, 1] + 0.3*x2[, 2] - x2[, 3] + rnorm(1000, 0, 0.05)
y1_pred <- DMTL(target_set = list(x1, y1), source_set = list(x2, y2), pred_model = "RF")
y1_pred_RF <- RF_predict(x_train = x2, y_train = y2, x_test = x1)
performance(y1, y1_pred, measures = c("MSE", "PCC"))
performance(y1, y1_pred_RF, measures = c("MSE", "PCC"))
library(DMTL)
?DMTL
?norm_data
library(DMTL)
?DMTL
?norm_data
library(DMTL)
?DMTL
library(DMTL)
## Checking with travis
usethis::use_travis()
?usethis::use_github_action()
usethis::use_github_action()
usethis::use_travis()
library(DMTL)
## Checking with travis
devtools::use_travis()
## Checking with travis
usethis::use_travis()
usethis::use_travis(browse = TRUE)
usethis::use_travis()
library(DMTL)
devtools::check(pkg = "caret")
devtools::check(pkg = caret)
devtools::check(pkg = "C:/Users/SRDhruba/Documents/R/win-library/3.6/caret/")
devtools::check(pkg = "C://Users//SRDhruba//Documents//R//win-library//3.6//caret//")
devtools::check(pkg = "C:\Users\SRDhruba\Documents\R\win-library\3.6\caret")
devtools::check(pkg = "C:\\Users\\SRDhruba\\Documents\\R\\win-library\\3.6\\caret")
devtools::check(pkg = "C:/Users/SRDhruba/Documents/R/win-library/3.6/caret")
devtools::check(pkg = "C:/Users/SRDhruba/Documents/R/win-library/3.6/glmnet/")
devtools::check(pkg = "C:/Users/SRDhruba/Documents/R/win-library/3.6/glmnet")
## Release package
devtools::release()
devtools::spell_check()
devtools::release()
devtools::check_rhub()
devtools::release()
devtools::submit_cran()
